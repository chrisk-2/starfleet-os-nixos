{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.security.pentest-suite;
  
  securityTools = {
    network = {
      nmap = {
        package = pkgs.nmap;
        description = "Network discovery and security auditing";
        category = "network-recon";
      };
      
      masscan = {
        package = pkgs.masscan;
        description = "TCP port scanner";
        category = "network-recon";
      };
      
      wireshark = {
        package = pkgs.wireshark;
        description = "Network protocol analyzer";
        category = "network-analysis";
      };
      
      bettercap = {
        package = pkgs.bettercap;
        description = "Swiss army knife for network attacks";
        category = "network-attack";
      };
    };
    
    password = {
      hydra = {
        package = pkgs.hydra;
        description = "Login cracker";
        category = "password-attack";
      };
      
      hashcat = {
        package = pkgs.hashcat;
        description = "World's fastest password cracker";
        category = "password-attack";
      };
      
      john = {
        package = pkgs.john;
        description = "John the Ripper password cracker";
        category = "password-attack";
      };
    };
    
    recon = {
      bloodhound = {
        package = pkgs.bloodhound;
        description = "Active Directory attack path analysis";
        category = "ad-recon";
      };
      
      neo4j = {
        package = pkgs.neo4j;
        description = "Graph database for BloodHound";
        category = "ad-recon";
      };
    };
    
    hardware = {
      usbutils = {
        package = pkgs.usbutils;
        description = "USB device management";
        category = "hardware-hack";
      };
      
      hackrf = {
        package = pkgs.hackrf;
        description = "Software defined radio tools";
        category = "rf-hack";
      };
      
      rtl-sdr = {
        package = pkgs.rtl-sdr;
        description = "RTL-SDR software defined radio";
        category = "rf-hack";
      };
    };
  };
  
in
{
  options.security.pentest-suite = {
    enable = mkEnableOption "Starfleet OS Pentest Suite";
    
    enableAll = mkOption {
      type = types.bool;
      default = false;
      description = "Enable all security tools";
    };
    
    categories = mkOption {
      type = types.listOf (types.enum [
        "network-recon"
        "network-analysis"
        "network-attack"
        "password-attack"
        "ad-recon"
        "hardware-hack"
        "rf-hack"
      ]);
      default = [ "network-recon" "network-analysis" ];
      description = "Categories of security tools to enable";
    };
    
    enableGPUAcceleration = mkOption {
      type = types.bool;
      default = true;
      description = "Enable GPU acceleration for hashcat";
    };
    
    enableDatabase = mkOption {
      type = types.bool;
      default = true;
      description = "Enable database for reconnaissance data";
    };
  };

  config = mkIf cfg.enable {
    # Security tools installation and wrapper scripts
    environment.systemPackages = with pkgs; [
      # Network tools
      nmap
      masscan
      wireshark
      bettercap
      
      # Password tools
      hydra
      hashcat
      john
      
      # Reconnaissance tools
      bloodhound
      neo4j
      
      # Hardware tools
      usbutils
      hackrf
      rtl-sdr
      
      # Additional tools
      metasploit
      sqlmap
      gobuster
      dirb
      nikto
      skipfish
      wpscan
      burpsuite
      
      # Custom wrapper scripts
      (writeScriptBin "starfleet-nmap" ''
        #!/bin/bash
        echo "Starfleet OS Nmap Wrapper"
        echo "Mode: $LCARS_MODE"
        exec ${nmap}/bin/nmap "$@"
      '')
      
      (writeScriptBin "starfleet-hashcat" ''
        #!/bin/bash
        echo "Starfleet OS Hashcat Wrapper"
        echo "Mode: $LCARS_MODE"
        if [[ "$LCARS_MODE" == "borg" ]]; then
          exec ${hashcat}/bin/hashcat --force "$@"
        else
          exec ${hashcat}/bin/hashcat "$@"
        fi
      '')
      
      (writeScriptBin "starfleet-recon" ''
        #!/bin/bash
        echo "Starfleet OS Reconnaissance Suite"
        echo "Mode: $LCARS_MODE"
        
        case "$LCARS_MODE" in
          "starfleet")
            echo "Standard reconnaissance protocols"
            ;;
          "section31")
            echo "Covert reconnaissance protocols"
            ;;
          "borg")
            echo "Assimilation reconnaissance protocols"
            ;;
          "terran")
            echo "Aggressive reconnaissance protocols"
            ;;
        esac
        
        exec "$@"
      '')
    ];
    
    # Security monitoring
    systemd.services.security-monitor = {
      description = "Security monitoring service";
      wantedBy = [ "multi-user.target" ];
      
      serviceConfig = {
        Type = "simple";
        User = "starfleet";
        Group = "starfleet";
        ExecStart = "${pkgs.callPackage ./security-monitor.nix { }}/bin/security-monitor";
        Restart = "always";
      };
    };
  };
}